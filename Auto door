/* Tên file trong máy: arduino: 15_07_UartProMini
*                      esp8266: 16_07_Finish1_1
* file này được tạo 16:28 ngày 20/07/2018
*/
/****************************************************************************************************
*
* Chương trình này sử dụng esp8266 node mcu và arduino pro mini
* Thành phần gồm, 1 esp8266, 1 arduino mini, 1 bàn phím 4x4, 1 cảm biến vân tay R305, 1 màn hình 16x2 và
* 1 module đọc thẻ từ RC522
*
*****************************************************************************************************/

/* Phần này dành cho arduino pro mini, chương trình sẽ đọc thẻ từ và trả về 12 nếu đúng, 56 nếu sai,
* đọc bàn phím, nhấn * để gửi, # để xoá tất, sẽ trả về 34 nếu đúng, 56 nếu sai
*
*********************************************************************************************************/


#include <Password.h> //http://www.arduino.cc/playground/uploads/Code/Password.zip
#include <Keypad.h> //http://www.arduino.cc/playground/uploads/Code/Keypad.zip
#include <SPI.h>
#include <RFID.h>

#define SS_PIN 10
#define RST_PIN A1

RFID rfid(SS_PIN,RST_PIN);

int serNum[5];          //Variable buffer Scan Card
int cards[][5] = {      //ID Kartu yang diperbolehkan masuk
  {160, 152, 140, 121, 205}
  
};
Password password = Password("12081970"); //<-- TULIS PASSWORD SISTEM ANDA DISINI
const byte ROWS = 4; // Four rows
const byte COLS = 4; //  columns
// Define the Keymap
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

byte rowPins[ROWS] = { 9,8,7,6 };// Connect keypad ROW0, ROW1, ROW2 and ROW3 to these Arduino pins.
byte colPins[COLS] = { 5,4,3,2 };// Connect keypad COL0, COL1 and COL2 to these Arduino pins.
// Create the Keypad
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
bool access = false;

void setup(){
    Serial.begin(9600);    
    SPI.begin();
    rfid.init();       
    //mfrc522.PCD_Init();   

    //for (byte i = 0; i < 6; i++) {
     //   key.keyByte[i] = 0xFF;
    //}
    keypad.addEventListener(keypadEvent); //add an event listener for this keypad
}


void loop(){
  keypad.getKey();  //Reading Keypad
      if(rfid.isCard()){
        if(rfid.readCardSerial()){
            /*Serial.print(rfid.serNum[0]);
            Serial.print(" ");
            Serial.print(rfid.serNum[1]);
            Serial.print(" ");
            Serial.print(rfid.serNum[2]);
            Serial.print(" ");
            Serial.print(rfid.serNum[3]);
            Serial.print(" ");
            Serial.print(rfid.serNum[4]);
            Serial.println("");*/
            
            for(int x = 0; x < sizeof(cards); x++){
              for(int i = 0; i < sizeof(rfid.serNum); i++ ){
                  if(rfid.serNum[i] != cards[x][i]) {
                      access = false;
                      //Serial.println("Not ok");
                      break;
                  } else {
                      access = true;
                      //Serial.println("Ok");
                  }
              }
              if(access) break;
            }   
        }
        
       if(access){
          /*Serial.println("Welcome!");
          Serial.println(F(" Akses diterima "));
          Serial.println("ID:");
          Serial.println(rfid.serNum[0]); Serial.println(rfid.serNum[1]);
          Serial.println(rfid.serNum[2]); Serial.println(rfid.serNum[3]);
          Serial.println(rfid.serNum[4]);*/
          //ACCEPT ();
          Serial.write(12);
          delay(1000);
          //Serial.print("12");
           } 
      
      else {
           /*Serial.println("Not allowed!"); 
           Serial.println(F(" Akses ditolak  "));
           Serial.println("ID:");
           Serial.println(rfid.serNum[0]); Serial.println(rfid.serNum[1]);
           Serial.println(rfid.serNum[2]); Serial.println(rfid.serNum[3]);
           Serial.println(rfid.serNum[4]);*/
           //RIJECT ();
           Serial.write(56);  
           delay(1000);  
           //Serial.print("56");
       }        
    }
}

void keypadEvent(KeypadEvent eKey){
  switch (keypad.getState()){
  case PRESSED:
  
  switch (eKey){
    case '*': checkPassword(); break;
    case '#': password.reset(); break;
    
    default: password.append(eKey);
     }
  }
}

void checkPassword(){
  if (password.evaluate()){
    //Serial.println("Da check");
    Serial.write(34);
    //Serial.print("34");
    //ACCEPT ();
    password.reset();
    //Add code to run if it works
    
  }else{
    //Serial.println(" Check Sai");
    //Serial.write(78);
    Serial.write(56);
    password.reset();
    //add code to run if it did not work
  } 
}

/**********************************************************************************************************
*
* Đoạn này dành cho esp8266 với chức năng đọc vân tay bằng softserial, đọc arduino bằng serial cứng,
* dành cho 2 loại khoá riêng biệt!
*
***********************************************************************************************************/
*
************
**********    ********
*********       ********
********          **********
*******                                      *********************************************************
******
*****               *************************
****
* *
/*************************************************************************************************************
 * Đoạn chương trình này dành cho loại khoá có khả năng giữ mở lâu, ở trạng thái thường đóng/mở và giữ đc !
 */

/*
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <OneButton.h>
#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h>
#include <NTPtimeESP.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x3F, 16, 2);
NTPtime NTPch("2.asia.pool.ntp.org");   // Server NTP
strDateTime dateTime;

// Wifi: SSID and password
const char* WIFI_SSID = "ABC";
const char* WIFI_PASSWORD = "mothaibabon";
// MQTT: ID, server IP, port, username and password
const PROGMEM char* MQTT_CLIENT_ID = "home_door1";
const PROGMEM char* MQTT_SERVER_IP = "192.168.1.247";
const PROGMEM uint16_t MQTT_SERVER_PORT = 1883;
const PROGMEM char* MQTT_USER = "";
const PROGMEM char* MQTT_PASSWORD = "";
// MQTT: topics
const PROGMEM char* MQTT_SWITCH_STATUS_TOPIC = "home/door1/status";
const PROGMEM char* MQTT_SWITCH_COMMAND_TOPIC = "home/door1/set";
// default payload
const PROGMEM char* SWITCH_ON = "ON";
const PROGMEM char* SWITCH_OFF = "OFF";

// store the state of the switch
boolean m_switch_state = false;
boolean state = false;
boolean stateadd = false;
boolean staterfid = false;
boolean checkpass = false;

unsigned int time1 = 0;
uint8_t num; //value 0-255
int8_t id;

const byte rxPin = D3;
const byte txPin = D4;
SoftwareSerial mySerial(rxPin, txPin);

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

// D7/GPIO13
const PROGMEM uint8_t BUTTON_POUT = 13;
// D6/GPIO12
const PROGMEM uint8_t BUTTON_PIN = 12;
// D5/GPIO14
const PROGMEM uint8_t LOCK_PIN = 14;
//SD3/GPIO10
const PROGMEM uint8_t ADD_PIN = 10; //Chan de them/xoa dau van tay

WiFiClient wifiClient;
PubSubClient client(wifiClient);

OneButton button_in(BUTTON_PIN, true); // false : active HIGH
OneButton button_out(BUTTON_POUT, true);
OneButton button_add(ADD_PIN, true);

void publishSwitchState() {
  if (m_switch_state) {
    client.publish(MQTT_SWITCH_STATUS_TOPIC, SWITCH_ON, true);
  } else {
    client.publish(MQTT_SWITCH_STATUS_TOPIC, SWITCH_OFF, true);
  }
}

void setLockState() {
  if (m_switch_state) {
    //lcd.clear();
    digitalWrite(LOCK_PIN, LOW);
    //Serial.println("INFO: Turn light on...");
    lcd.setCursor(1,1);
    lcd.print("OK, Cua da mo!!");
    delay(1500);
    lcd.clear();
    
  } else {
    //lcd.clear();
    digitalWrite(LOCK_PIN, HIGH);
    //Serial.println("INFO: Turn light off...");
    lcd.setCursor(0,1);
    lcd.print("OK, Cua da dong!");
    delay(1500);
    lcd.clear();
    staterfid = false;
    checkpass = false;
  }
  publishSwitchState();
}

// function called when a MQTT message arrived
void callback(char* p_topic, byte* p_payload, unsigned int p_length) {
  // concat the payload into a string
  String payload;
  for (uint8_t i = 0; i < p_length; i++) {
    payload.concat((char)p_payload[i]);
  }
  // handle message topic
  if (String(MQTT_SWITCH_COMMAND_TOPIC).equals(p_topic)) {
    // test if the payload is equal to "ON" or "OFF"
    if (payload.equals(String(SWITCH_ON))) {
      if (m_switch_state != true) {
        m_switch_state = true;
        setLockState();
      }
    } else if (payload.equals(String(SWITCH_OFF))) {
      if (m_switch_state != false) {
        m_switch_state = false;
        setLockState();
      }
    }
  }
}

// function called on button press
// toggle the state of the switch
void click_in() {
  if (m_switch_state) {
    m_switch_state = false;
    state = false;
  } else {
    m_switch_state = true;
  }
  setLockState();
}

void doubleclick () {
  if(checkpass == false){
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Ban chua nhap MK");
    delay(1000);
  }
  else{
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Them voi ID: ");
    lcd.print(num+1);
    lcd.setCursor(1,1);
    lcd.print("Cho tay vao :D");
    getFingerprintEnroll();
    delay(50);
    lcd.clear();
    //checkpass = false;
  }
}

void longpress_in(){
    if(checkpass == false){
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Ban chua nhap MK");
    delay(1000);
  }
  else{
  deleteFingerprint(num);
  if(num >= 1){
  num--;}
  else{}
  }
}

void longpress_out(){
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Tong so van tay");
  lcd.setCursor(0,1);
  lcd.print("da luu la: ");
  lcd.print(num);
  delay(1500);
  lcd.clear();
}

void click_out() {
  if (m_switch_state) {
    m_switch_state = false;
    state = false;
    setLockState();
  }
  else 
  {
    state = false;
    while(state == false){
      lcd.clear();
      //Serial.println("Cho tay vao :D");
      lcd.setCursor(1,0);
      lcd.print("Cho tay vao :D");
      getFingerprintIDez(); //Check if a finger has been scanned
      delay(50);
      lcd.clear();
      }
  }
}

void reconnect() {
  // Loop until we're reconnected
  if (!client.connected()) {
    //Serial.println("INFO: Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(MQTT_CLIENT_ID, MQTT_USER, MQTT_PASSWORD)) {
      //Serial.println("INFO: connected");
      
      // Once connected, publish an announcement...
      // publish the initial values
      publishSwitchState();

      // ... and resubscribe
      client.subscribe(MQTT_SWITCH_COMMAND_TOPIC);
    }
  }
}

//--------------------------------------------------------------------------------------------------------------------------------//

uint8_t getFingerprintID() {
  
  uint8_t p = finger.getImage();
  
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      //Serial.println("Imaging error");
      return p;
    default:
      //Serial.println("Unknown error");
      return p;
  }

  // OK success!
  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      //Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      //Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      //Serial.println("Could not find fingerprint features");
      return p;
    default:
      //Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    //Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    //Serial.println("Did not find a match");
    return p;
  } else {
    //Serial.println("Unknown error");
    return p;
  }   
  
  // found a match!
  //Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  //Serial.print(" with confidence of "); Serial.println(finger.confidence); 
}

// returns -1 if failed, otherwise returns ID #
int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK) {
    m_switch_state = false;
    state = true;
    lcd.clear();
    lcd.setCursor(3,0);
    lcd.print("SAI MAT ROI");
    lcd.setCursor(0,1);
    lcd.print("K mo dau, ahihi!");
    delay(1500);
    lcd.clear();
    return -1;
  }
  
  // found a match!
  //Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  //Serial.print(" with confidence of "); Serial.println(finger.confidence);

  for(int h=1; h<=num; h++){
  if(finger.fingerID == h){ //Repalce '1' with the ID for the fingerprint. I used ascending numerical values (1-6)
    //Serial.println("OK, Mo cua");
    //lcd.setCursor(1,1);
    //lcd.print("OK, Da mo cua!");
    m_switch_state = true;
    state = true;
    setLockState();
   }
  }
  return finger.fingerID; 
}


//-------------------------------------------------------------------------------------------------------------------------------//

uint8_t getFingerprintEnroll() {
  int p = -1;
  //Serial.print("Waiting for valid finger to enroll as #"); Serial.println(num+1);
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      //Serial.println("Imaging error");
      break;
    default:
      //Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      //Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      //Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      //Serial.println("Could not find fingerprint features");
      return p;
    default:
      //Serial.println("Unknown error");
      return p;
  }
  
  //Serial.println("Remove finger");
  lcd.clear();
  lcd.setCursor(2,0);
  lcd.print("Bo tay ra :D");
  delay(500);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  //Serial.print("ID "); Serial.println(num+1);
  p = -1;
  //Serial.println("Place same finger again");
  lcd.setCursor(0,1);
  lcd.print("Cho lai tay vao!");
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.print(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      //Serial.println("Imaging error");
      break;
    default:
      //Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      //Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      //Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      //Serial.println("Could not find fingerprint features");
      return p;
    default:
      //Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  //Serial.print("Creating model for #");  Serial.println(num);
  
  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    //Serial.println("Prints matched!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    //Serial.println("Fingerprints did not match");
    return p;
  } else {
    //Serial.println("Unknown error");
    return p;
  }   
  
  //Serial.print("ID "); Serial.println(num+1);
  p = finger.storeModel(num+1);
  if (p == FINGERPRINT_OK) {
    //Serial.println("Stored!");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Them thanh cong!");
    lcd.setCursor(2,1);
    lcd.print("Your ID: ");
    lcd.print(num+1);
    num++;
    checkpass = false;
    //delay(2000);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Khong thanh cong");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    //Serial.println("Could not store in that location");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Khong thanh cong");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    //Serial.println("Error writing to flash");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Khong thanh cong");
    return p;
  } else {
    //Serial.println("Unknown error");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Khong thanh cong");
    return p;
  }
  delay(2000);
}

//-------------------------------------------------------------------------------------------------------------------------------//

uint8_t deleteFingerprint(uint8_t num) {
  uint8_t p = -1;
  if(num == 0){
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("K co gi de xoa!");
        delay(1000);
        lcd.clear();
    }
  else {
  p = finger.deleteModel(num);}
  if (p == FINGERPRINT_OK) {
  //Serial.println("Deleted!");
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Xoa thanh cong!");
  lcd.setCursor(5,1);
  lcd.print("ID: ");
  lcd.print(num);
  checkpass = false;
  delay(1500);
  lcd.clear();
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    //Serial.println("Could not delete in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    //Serial.println("Error writing to flash");
    return p;
  } else {
    //Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
    return p;
  }
}

//-------------------------------------------------------------------------------------------------------------------------------//


//-------------------------------------------------------------------------------------------------------------------------------//
void setup() {
  // init the serial
  Serial.begin(9600);
  lcd.begin(16,2);
  lcd.init();
  // Turn on the backlight.
  lcd.backlight();

  WiFi.disconnect(); 
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  // init the MQTT connection
  client.setServer(MQTT_SERVER_IP, MQTT_SERVER_PORT);
  client.setCallback(callback);
  
  pinMode(LOCK_PIN, OUTPUT);
  digitalWrite(LOCK_PIN, HIGH);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(BUTTON_POUT, INPUT_PULLUP);
  pinMode(ADD_PIN, INPUT_PULLUP);
  // link the click function to be called on a single click event.   
  button_in.attachClick(click_in);
  button_add.attachDoubleClick(doubleclick);
  button_add.attachDuringLongPress(longpress_in);
  button_out.attachClick(click_out);
  button_out.attachDuringLongPress(longpress_out);
  
  finger.begin(57600);
  finger.getTemplateCount();
  num = finger.templateCount;
  
}

void loop() {
  id = Serial.read();
  while(id != -1 && staterfid == false){
    if(id == 12 || id ==34){
      if(id == 34){
      checkpass = true;
      }
      m_switch_state = true;
      staterfid = true;
      setLockState();
      id = -1;
    }
    else if(id == 56){
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Sai roi!");
      //lcd.print(id);
      id = -1;
      //delay(500);
      //staterfid = true;
    }
  }
  
      if ( (unsigned long) (millis() - time1) > 500 )
         {
          dateTime = NTPch.getNTPtime(7.0, 0);
          if(dateTime.valid){
              lcd.clear();
              lcd.setCursor(0,0);
              if(dateTime.year>2025){
                lcd.print("Khog lay dc time");
              }
              else{
                if(dateTime.dayofWeek == 1){
                  lcd.setCursor(2,0);
                  lcd.print("CN");
                }
                else{
              lcd.print("Thu ");
              lcd.print(dateTime.dayofWeek);}
              lcd.print("-");
              lcd.print(dateTime.day);
              lcd.print("/");
              lcd.print(dateTime.month);
              lcd.print("/");
              lcd.print(dateTime.year);
              lcd.setCursor(1,1);
              lcd.print(dateTime.hour);
              lcd.print(":");
              lcd.print(dateTime.minute);
              lcd.print(":");
              lcd.print(dateTime.second);}
          }
              if(m_switch_state == false){
                lcd.setCursor(10,1);
                lcd.print("LOCK!");
              }
              else{
                lcd.setCursor(10,1);
                lcd.print("OPEN!");
              }
      time1 = millis();
    }
  // keep watching the push button:
  button_in.tick();
  button_out.tick();
  button_add.tick();
  delay(10);

  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}*/
/*********************************************************************************************************************************/

/*********************************************************************************************************************************
 * 
 * 
 * Đoạn chương trình này dành cho loại khoá chỉ giữ trạng thái mở được trong 1phút
 * Sẽ tự động khoá sau 10giây sau khi mở!
 * 
 * 
 * 
 * 
 */

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <OneButton.h>
#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h>
#include <NTPtimeESP.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x3F, 16, 2);
NTPtime NTPch("2.asia.pool.ntp.org");   // Server NTP
strDateTime dateTime;

// Wifi: SSID and password
const char* WIFI_SSID = "ABC";
const char* WIFI_PASSWORD = "mothaibabon";
// MQTT: ID, server IP, port, username and password
const PROGMEM char* MQTT_CLIENT_ID = "home_door1";
const PROGMEM char* MQTT_SERVER_IP = "192.168.1.247";
const PROGMEM uint16_t MQTT_SERVER_PORT = 1883;
const PROGMEM char* MQTT_USER = "";
const PROGMEM char* MQTT_PASSWORD = "";
// MQTT: topics
const PROGMEM char* MQTT_SWITCH_STATUS_TOPIC = "home/door1/status";
const PROGMEM char* MQTT_SWITCH_COMMAND_TOPIC = "home/door1/set";
// default payload
const PROGMEM char* SWITCH_ON = "ON";
const PROGMEM char* SWITCH_OFF = "OFF";

// store the state of the switch
boolean m_switch_state = false;
boolean state = false;
boolean stateadd = false;
boolean staterfid = false;
boolean checkpass = false;

unsigned int time1 = 0;
uint8_t num; //value 0-255
int8_t id;

const byte rxPin = D3;
const byte txPin = D4;
SoftwareSerial mySerial(rxPin, txPin);

Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);

// D7/GPIO13
const PROGMEM uint8_t BUTTON_POUT = 13;
// D6/GPIO12
const PROGMEM uint8_t BUTTON_PIN = 12;
// D5/GPIO14
const PROGMEM uint8_t LOCK_PIN = 14;
//SD3/GPIO10
const PROGMEM uint8_t ADD_PIN = 10; //Chan de them/xoa dau van tay

WiFiClient wifiClient;
PubSubClient client(wifiClient);

OneButton button_in(BUTTON_PIN, true); // false : active HIGH
OneButton button_out(BUTTON_POUT, true);
OneButton button_add(ADD_PIN, true);

void publishSwitchState() {
  if (m_switch_state) {
    client.publish(MQTT_SWITCH_STATUS_TOPIC, SWITCH_ON, true);
  } else {
    client.publish(MQTT_SWITCH_STATUS_TOPIC, SWITCH_OFF, true);
  }
}

void setLockState() {
  if (m_switch_state) {
    //lcd.clear();
    digitalWrite(LOCK_PIN, LOW);
    //Serial.println("INFO: Turn light on...");
    lcd.setCursor(1,1);
    lcd.print("OK, Cua da mo!!");
    delay(1500);
    lcd.clear();
               lcd.print("Cua tu dong sau ");
           //Serial.println(F("AutoLock after "));
           for(int i=5; i>0; i--){
            lcd.setCursor (8,1); lcd.print(i);
            //Serial.println(i);
            delay (1000);
           }
    //lcd.clear();
    digitalWrite(LOCK_PIN, HIGH);
    //Serial.println("INFO: Turn light off...");
    lcd.setCursor(0,1);
    lcd.print("OK, Cua da dong!");
    delay(1500);
    lcd.clear();
    staterfid = false;
    m_switch_state = false;
    //checkpass = false;
  }
  publishSwitchState();
}

// function called when a MQTT message arrived
void callback(char* p_topic, byte* p_payload, unsigned int p_length) {
  // concat the payload into a string
  String payload;
  for (uint8_t i = 0; i < p_length; i++) {
    payload.concat((char)p_payload[i]);
  }
  // handle message topic
  if (String(MQTT_SWITCH_COMMAND_TOPIC).equals(p_topic)) {
    // test if the payload is equal to "ON" or "OFF"
    if (payload.equals(String(SWITCH_ON))) {
      if (m_switch_state != true) {
        m_switch_state = true;
        setLockState();
      }
    } else if (payload.equals(String(SWITCH_OFF))) {
      if (m_switch_state != false) {
        //m_switch_state = false;
        //setLockState();
        publishSwitchState();
      }
    }
  }
}

// function called on button press
// toggle the state of the switch
void click_in() {
  if (m_switch_state) {
    m_switch_state = false;
    state = false;
  } else {
    m_switch_state = true;
  }
  setLockState();
}

void doubleclick () {
  if(checkpass == false){
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Ban chua nhap MK");
    delay(1000);
  }
  else{
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Them voi ID: ");
    lcd.print(num+1);
    lcd.setCursor(1,1);
    lcd.print("Cho tay vao :D");
    getFingerprintEnroll();
    delay(50);
    lcd.clear();
    //checkpass = false;
  }
}

void longpress_in(){
    if(checkpass == false){
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Ban chua nhap MK");
    delay(1000);
  }
  else{
  deleteFingerprint(num);
  if(num >= 1){
  num--;}
  else{}
  }
}

void longpress_out(){
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Tong so van tay");
  lcd.setCursor(0,1);
  lcd.print("da luu la: ");
  lcd.print(num);
  delay(1500);
  lcd.clear();
}

void click_out() {
  if (m_switch_state) {
    m_switch_state = false;
    state = false;
    setLockState();
  }
  else 
  {
    state = false;
    while(state == false){
      lcd.clear();
      //Serial.println("Cho tay vao :D");
      lcd.setCursor(1,0);
      lcd.print("Cho tay vao :D");
      getFingerprintIDez(); //Check if a finger has been scanned
      delay(50);
      lcd.clear();
      }
  }
}

void reconnect() {
  // Loop until we're reconnected
  if (!client.connected()) {
    //Serial.println("INFO: Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(MQTT_CLIENT_ID, MQTT_USER, MQTT_PASSWORD)) {
      //Serial.println("INFO: connected");
      
      // Once connected, publish an announcement...
      // publish the initial values
      publishSwitchState();

      // ... and resubscribe
      client.subscribe(MQTT_SWITCH_COMMAND_TOPIC);
    }
  }
}

//--------------------------------------------------------------------------------------------------------------------------------//

uint8_t getFingerprintID() {
  
  uint8_t p = finger.getImage();
  
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println("No finger detected");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return p;
    case FINGERPRINT_IMAGEFAIL:
      //Serial.println("Imaging error");
      return p;
    default:
      //Serial.println("Unknown error");
      return p;
  }

  // OK success!
  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      //Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      //Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      //Serial.println("Could not find fingerprint features");
      return p;
    default:
      //Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  p = finger.fingerFastSearch();
  if (p == FINGERPRINT_OK) {
    //Serial.println("Found a print match!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_NOTFOUND) {
    //Serial.println("Did not find a match");
    return p;
  } else {
    //Serial.println("Unknown error");
    return p;
  }   
  
  // found a match!
  //Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  //Serial.print(" with confidence of "); Serial.println(finger.confidence); 
}

// returns -1 if failed, otherwise returns ID #
int getFingerprintIDez() {
  uint8_t p = finger.getImage();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.image2Tz();
  if (p != FINGERPRINT_OK)  return -1;

  p = finger.fingerFastSearch();
  if (p != FINGERPRINT_OK) {
    m_switch_state = false;
    state = true;
    lcd.clear();
    lcd.setCursor(3,0);
    lcd.print("SAI MAT ROI");
    lcd.setCursor(0,1);
    lcd.print("K mo dau, ahihi!");
    delay(1500);
    lcd.clear();
    return -1;
  }
  
  // found a match!
  //Serial.print("Found ID #"); Serial.print(finger.fingerID); 
  //Serial.print(" with confidence of "); Serial.println(finger.confidence);

  for(int h=1; h<=num; h++){
  if(finger.fingerID == h){ //Repalce '1' with the ID for the fingerprint. I used ascending numerical values (1-6)
    //Serial.println("OK, Mo cua");
    //lcd.setCursor(1,1);
    //lcd.print("OK, Da mo cua!");
    m_switch_state = true;
    state = true;
    setLockState();
   }
  }
  return finger.fingerID; 
}


//-------------------------------------------------------------------------------------------------------------------------------//

uint8_t getFingerprintEnroll() {
  int p = -1;
  //Serial.print("Waiting for valid finger to enroll as #"); Serial.println(num+1);
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.println(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      //Serial.println("Imaging error");
      break;
    default:
      //Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      //Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      //Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      //Serial.println("Could not find fingerprint features");
      return p;
    default:
      //Serial.println("Unknown error");
      return p;
  }
  
  //Serial.println("Remove finger");
  lcd.clear();
  lcd.setCursor(2,0);
  lcd.print("Bo tay ra :D");
  delay(500);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
  }
  //Serial.print("ID "); Serial.println(num+1);
  p = -1;
  //Serial.println("Place same finger again");
  lcd.setCursor(0,1);
  lcd.print("Cho lai tay vao!");
  while (p != FINGERPRINT_OK) {
    p = finger.getImage();
    switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image taken");
      break;
    case FINGERPRINT_NOFINGER:
      //Serial.print(".");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      //Serial.println("Imaging error");
      break;
    default:
      //Serial.println("Unknown error");
      break;
    }
  }

  // OK success!

  p = finger.image2Tz(2);
  switch (p) {
    case FINGERPRINT_OK:
      //Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      //Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      //Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      //Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      //Serial.println("Could not find fingerprint features");
      return p;
    default:
      //Serial.println("Unknown error");
      return p;
  }
  
  // OK converted!
  //Serial.print("Creating model for #");  Serial.println(num);
  
  p = finger.createModel();
  if (p == FINGERPRINT_OK) {
    //Serial.println("Prints matched!");
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_ENROLLMISMATCH) {
    //Serial.println("Fingerprints did not match");
    return p;
  } else {
    //Serial.println("Unknown error");
    return p;
  }   
  
  //Serial.print("ID "); Serial.println(num+1);
  p = finger.storeModel(num+1);
  if (p == FINGERPRINT_OK) {
    //Serial.println("Stored!");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Them thanh cong!");
    lcd.setCursor(2,1);
    lcd.print("Your ID: ");
    lcd.print(num+1);
    num++;
    checkpass = false;
    //delay(2000);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Khong thanh cong");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    //Serial.println("Could not store in that location");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Khong thanh cong");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    //Serial.println("Error writing to flash");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Khong thanh cong");
    return p;
  } else {
    //Serial.println("Unknown error");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Khong thanh cong");
    return p;
  }
  delay(2000);
}

//-------------------------------------------------------------------------------------------------------------------------------//

uint8_t deleteFingerprint(uint8_t num) {
  uint8_t p = -1;
  if(num == 0){
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("K co gi de xoa!");
        delay(1000);
        lcd.clear();
    }
  else {
  p = finger.deleteModel(num);}
  if (p == FINGERPRINT_OK) {
  //Serial.println("Deleted!");
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Xoa thanh cong!");
  lcd.setCursor(5,1);
  lcd.print("ID: ");
  lcd.print(num);
  checkpass = false;
  delay(1500);
  lcd.clear();
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    //Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    //Serial.println("Could not delete in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    //Serial.println("Error writing to flash");
    return p;
  } else {
    //Serial.print("Unknown error: 0x"); Serial.println(p, HEX);
    return p;
  }
}

//-------------------------------------------------------------------------------------------------------------------------------//


//-------------------------------------------------------------------------------------------------------------------------------//
void setup() {
  // init the serial
  Serial.begin(9600);
  lcd.begin(16,2);
  lcd.init();
  // Turn on the backlight.
  lcd.backlight();

  WiFi.disconnect(); 
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  // init the MQTT connection
  client.setServer(MQTT_SERVER_IP, MQTT_SERVER_PORT);
  client.setCallback(callback);
  
  pinMode(LOCK_PIN, OUTPUT);
  digitalWrite(LOCK_PIN, HIGH);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(BUTTON_POUT, INPUT_PULLUP);
  pinMode(ADD_PIN, INPUT_PULLUP);
  // link the click function to be called on a single click event.   
  button_in.attachClick(click_in);
  button_add.attachDoubleClick(doubleclick);
  button_add.attachDuringLongPress(longpress_in);
  button_out.attachClick(click_out);
  button_out.attachDuringLongPress(longpress_out);
  
  finger.begin(57600);
  finger.getTemplateCount();
  num = finger.templateCount;
  
}

void loop() {
  id = Serial.read();
  while(id != -1 && staterfid == false){
    if(id == 12 || id ==34){
      if(id == 34){
      checkpass = true;
      }
      m_switch_state = true;
      staterfid = true;
      setLockState();
      id = -1;
    }
    else if(id == 56){
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Sai roi!");
      //lcd.print(id);
      id = -1;
      //delay(500);
      //staterfid = true;
    }
  }
  
      if ( (unsigned long) (millis() - time1) > 500 )
         {
          dateTime = NTPch.getNTPtime(7.0, 0);
          if(dateTime.valid){
              lcd.clear();
              lcd.setCursor(0,0);
              if(dateTime.year>2025){
                lcd.print("Khog lay dc time");
              }
              else{
                if(dateTime.dayofWeek == 1){
                  lcd.setCursor(2,0);
                  lcd.print("CN");
                }
                else{
              lcd.print("Thu ");
              lcd.print(dateTime.dayofWeek);}
              lcd.print("-");
              lcd.print(dateTime.day);
              lcd.print("/");
              lcd.print(dateTime.month);
              lcd.print("/");
              lcd.print(dateTime.year);
              lcd.setCursor(1,1);
              lcd.print(dateTime.hour);
              lcd.print(":");
              lcd.print(dateTime.minute);
              lcd.print(":");
              lcd.print(dateTime.second);}
          }
              if(m_switch_state == false){
                lcd.setCursor(10,1);
                lcd.print("LOCK!");
              }
              else{
                lcd.setCursor(10,1);
                lcd.print("OPEN!");
              }
      time1 = millis();
    }
  // keep watching the push button:
  button_in.tick();
  button_out.tick();
  button_add.tick();
  delay(10);

  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}
